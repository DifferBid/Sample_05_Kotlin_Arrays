
package org.example

fun main() {
    /**-----Example 01-----*/
    // Для нахождения наибольшего числа в массиве можно использовать цикл, который сравнивает каждый элемент с текущим наибольшим числом.
    val numbers: IntArray = intArrayOf(4, 9, 3, 2, 6)
    var largestElement = numbers[0]

    for (number in numbers) {
        if (largestElement < number)
            largestElement = number
    }

    println("Наибольшее число в массиве: $largestElement")
    // В ЭТОМ ПРИМЕРЕ: мы инициализируем переменную largestElement первым элементом массива
    // и затем проходим по каждому элементу массива, обновляя largestElement, если текущий элемент больше.

    /**-----Example 02-----*/
    // Для нахождения наименьшего числа алгоритм будет аналогичным, но с противоположным условием:
    var smallestElement = numbers[0]

    for (number in numbers) {
        if (smallestElement > number)
            smallestElement = number
    }

    println("Наименьшее число в массиве: $smallestElement")

    /**-----Example 03-----*/
    // Использование встроенных функций minOrNull() и maxOrNull()

    // В Kotlin есть встроенные функции, которые упрощают нахождение наибольших и наименьших чисел в коллекциях:
    // maxOrNull(): Возвращает наибольший элемент массива или null, если массив пуст.
    // minOrNull(): Возвращает наименьший элемент массива или null, если массив пуст.

    println("Наибольшее число в массиве: ${numbers.maxOrNull()}") // InConsole: Наибольшее число в массиве: 9
    println("Наименьшее число в массиве: ${numbers.minOrNull()}") // InConsole: Наименьшее число в массиве: 2

    // Эти функции безопасны для использования с пустыми массивами, так как они возвращают null в этом случае, вместо того чтобы бросать исключение.
    // Однако важно учитывать этот момент и обрабатывать возможное значение null, если массив может быть пустым.

}
