
package org.example

fun main() {

    /**-----Example 01-----*/
    // Создание массивов с использованием конструктора Array()
    // Пример создания массива целых чисел, где каждый элемент умножается на 2:
    val myArray = Array(5) { i -> i * 2 } // Создает массив [0, 2, 4, 6, 8]
    println(myArray[3]) // InConsole: 6
    // В этом примере массив создается с 5 элементами.
    // Лямбда-выражение { i -> i * 2 } инициализирует каждый элемент массива значением, равным индексу, умноженному на 2.

    /**-----Example 02-----*/
    // Создание массива строк
    // Для создания массива строк с буквами от "A" до "Z":
    val letters = Array<String>(26) { i -> ('A' + i).toString() }
    println(letters.joinToString("")) // InConsole: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    // В этом случае используется лямбда-выражение { i -> ('A' + i).toString() },
    // которое добавляет индекс i к символу 'A', а затем преобразует результат в строку.
    // Это создает массив строк с буквами от "A" до "Z".

    /**-----Example 03-----*/
    // Упрощение синтаксиса
    // В Kotlin можно опустить указание типа массива, если компилятор может вывести тип самостоятельно:
    val lettersAltA = Array(26) { i -> ('A' + i).toString() }
    // Компилятор самостоятельно определит, что letters является массивом строк (Array<String>).

    /**-----Example 04-----*/
    // Использование специализированных массивов
    // Kotlin предоставляет специализированные массивы для примитивных типов данных,
    // такие как IntArray, ByteArray, CharArray и другие.
    // Они оптимизированы для работы с соответствующими примитивными типами, что позволяет избегать дополнительных накладных расходов на автопреобразование.

    // Примеры создания массивов примитивных типов
    // IntArray:
    val zeros = IntArray(3) // Создает массив [0, 0, 0]
    val zeros2 = intArrayOf(0, 0, 0) // Альтернативный способ создания массива [0, 0, 0]
    println(zeros.joinToString()) // InConsole: 0, 0, 0
    // Использование лямбда-выражения с IntArray:
    val intArray = IntArray(4) { i -> i + i } // Создает массив [0, 2, 4, 6]
    println(intArray.joinToString()) // InConsole: 0, 2, 4, 6
    // В данном случае IntArray инициализируется с 4 элементами, и каждый элемент устанавливается как удвоенный индекс.

}