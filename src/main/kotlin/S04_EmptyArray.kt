
package org.example

fun main() {

    /**-----Example 01-----*/
    // Пример использования emptyArray()
    // Создадим пустой массив строк и затем добавим в него элементы:

    var arr = emptyArray<String>() // Создаем пустой массив строк
    arr += "1" // Добавляем элемент "1"
    arr += "2" // Добавляем элемент "2"
    arr += "3" // Добавляем элемент "3"
    arr += "4" // Добавляем элемент "4"
    arr += "5" // Добавляем элемент "5"

    // Выводим элементы массива
    for (item in arr) {
        println(item)
    }

    // Создание пустого массива:
    // emptyArray<String>() создает пустой массив типа Array<String>. Массив не содержит элементов, но тип его элементов определен как String.
    // Добавление элементов в массив:
    // Оператор += в данном контексте используется для добавления элементов в массив. Этот оператор не модифицирует исходный массив, а создает новый массив с добавленным элементом.
    // В результате каждой операции arr += "элемент" создается новый массив, содержащий все предыдущие элементы и добавленный.
    // Вывод элементов массива:
    // Цикл for используется для перебора элементов массива и их вывода в консоль.

    // Где еще можно использовать emptyArray()?

    /**-----Example 02-----*/
    // Инициализация переменных
    // emptyArray() часто используется для инициализации переменных, которые должны содержать массив,
    // но еще не имеют данных. Например:
    var stringArray: Array<String> = emptyArray()
    // позже данные могут быть добавлены
    stringArray += "Hello"

    /**-----Example 03-----*/
    // Функции с массивами
    // Когда функция ожидает массив, но по умолчанию должна принимать пустой массив,
    // emptyArray() является удобным способом указать это:
    fun processStrings(strings: Array<String> = emptyArray()) {
        // Обработка строк
        for (str in strings) {
            println(str)
        }
    }

    /**-----Example 04-----*/
    // Возвращение пустого массива
    // Когда функция должна возвращать массив, но в некоторых случаях массив пуст, можно вернуть emptyArray():
    fun findMatches(pattern: String, text: String): Array<String> {
        // Логика поиска совпадений
        if (pattern == "нет совпадений") {
            return emptyArray() // Возвращаем пустой массив, если нет совпадений
        }
        // иначе возвращаем массив совпадений
        return arrayOf("match1", "match2")
    }

    /**-----Example 05-----*/
    // Заполнение массивов позже
    // Иногда массивы создаются заранее, но данные в них добавляются позже в зависимости от условий:
    val condition = 2 < 1
    val items = if (condition) {
        arrayOf("item1", "item2")
    } else {
        emptyArray()
    }

    /**-----Example 06-----*/
    // Параметры командной строки
    // Для программ, которые принимают параметры командной строки,
    // emptyArray() можно использовать для инициализации переменной, хранящей эти параметры,
    // когда программа запускается без них:
    fun main(args: Array<String> = emptyArray()) {
        if (args.isEmpty()) {
            println("No arguments provided")
        } else {
            println("Arguments: ${args.joinToString()}")
        }
    }

    /**-----Example 07-----*/
    // Совместимость с методами, ожидающими массив
    // Когда метод или API ожидает массив, но данные для передачи отсутствуют,
    // emptyArray() можно использовать для передачи пустого массива:
    val list = listOf(*emptyArray<String>()) // Создаем пустой список

    // Итог: Таким образом, emptyArray() предоставляет гибкий и удобный способ работы с массивами в различных ситуациях,
    // где требуется пустой массив определенного типа.

}
