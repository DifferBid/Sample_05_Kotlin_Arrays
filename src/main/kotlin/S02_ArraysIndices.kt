package org.example

fun main() {
    /**-----Example 01-----*/
    // Использование свойства indices
    // indices возвращает диапазон (Range), который содержит все индексы массива
    val numbers = intArrayOf(1, 2, 3, 4, 5) // Создаем массив целых чисел
    for (index in numbers.indices) { // Проходим по каждому индексу массива
        println("Значение индекса $index равно ${numbers[index]}") // InConsole: Выводим индекс и соответствующее значение элемента массива
  }
    /**-----Example 02-----*/
    // Удаление элемента из интервала индексов
    // Можно использовать операции с диапазоном, чтобы исключить определенные индексы из перебора.
    // В следующем примере исключается третий элемент массива (индекс 2):
    val numbersAltA = intArrayOf(1, 2, 3, 4, 5) // Создаем массив целых чисел
    for(index in numbersAltA.indices - 2) { // Исключаем индекс 2 из диапазона
        println(numbersAltA[index])
        // Выводим элементы, пропуская тот, который соответствует индексу 2
        // InConsole: 1 2 4 5
        // Итог: Здесь numbers.indices - 2 создает новый диапазон индексов без элемента с индексом 2.
    }

    /**-----Example 02_1-----*/
    // Как исключить несколько индексов?

    /* В Kotlin можно исключить несколько индексов при помощи операций с диапазонами. Однако, чтобы исключить несколько индексов,
       можно использовать фильтрацию списка индексов или создать свой собственный диапазон без нужных индексов. */

    // Пример исключения нескольких индексов
    // Рассмотрим пример, где из массива нужно исключить элементы с индексами 1 и 3:
    val numbersAltB = intArrayOf(1, 2, 3, 4, 5) // Создаем массив целых чисел
    val indicesToExclude = setOf(1, 3) // Индексы, которые нужно исключить

    for (index in numbersAltB.indices) {
        if (index !in indicesToExclude) { // Проверяем, не содержится ли индекс в списке исключений
            println(numbersAltB[index])   // Выводим элементы, исключая те, которые соответствуют индексам 1 и 3
            // InConsole: 1 3 5
        }
    }
    // В этом примере:
    // Создается множество indicesToExclude, которое содержит индексы, которые нужно исключить.
    // В цикле for мы проверяем, содержится ли текущий индекс в этом множестве, и если нет, то выводим соответствующий элемент массива.

    /**-----Example 02_2-----*/
    // Можно также использовать функции фильтрации
    val numbersAltC = intArrayOf(1, 2, 3, 4, 5)
    val indicesToExcludeAltC = setOf(1, 3)
    val filteredNumbers = numbersAltC.filterIndexed { index, _ ->
        index !in indicesToExcludeAltC
    }
    filteredNumbers.forEach {
        println(it) // InConsole:  1 3 5
    }
    // В этом примере:
    // Мы используем функцию filterIndexed, которая фильтрует элементы массива, исключая те, чьи индексы указаны в indicesToExclude.
    // Затем выводим оставшиеся элементы.

    // Итог: Оба подхода (Example 02_1, Example 02_2) позволяют эффективно исключить несколько индексов из массива в Kotlin.

    /**-----Example 03-----*/
    // Объединение массивов
    // Kotlin поддерживает объединение массивов с помощью оператора +.
    // Этот оператор создает новый массив, содержащий элементы обоих массивов
    val numbersAltQ = intArrayOf(1, 2, 3) // Первый массив
    val numbersAltW = intArrayOf(4, 5, 6) // Второй массив
    val combinedArray = numbersAltQ + numbersAltW // Объединение массивов
    println(combinedArray[5]) // Выводим элемент с индексом 5 из объединенного массива.
        // InConsole: 6
    for( index in combinedArray.indices){
        println("Индекс = $index значение = ${combinedArray[index]}") // Проходим по каждому индексу массива
        // InConsole:
        // Индекс = 0 значение = 1
        // Индекс = 1 значение = 2
        // Индекс = 2 значение = 3
        // Индекс = 3 значение = 4
        // Индекс = 4 значение = 5
        // Индекс = 5 значение = 6
    }
    // В этом примере:
    // Массивы numbersAltQ и numbersAltW объединяются в один массив combinedArray.
    // Обратите внимание, что порядок элементов сохраняется: сначала элементы из numbersAltQ, затем из numbersAltW.

}