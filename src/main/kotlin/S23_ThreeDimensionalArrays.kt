
package org.example
import java.util.*

fun main() {
    /**-----Example 01-----*/
    // Давайте подробно рассмотрим создание трёхмерного массива и работу с ним.
    // В данном примере создаётся трёхмерный массив размером 3x3x3, заполненный нулями:
    // Создаём трёхмерный массив
    var rubikCube = arrayOf<Array<Array<Int>>>()

    // Внешний цикл создает слои (плоскости) массива
    for (i in 0..2) {
        // Создаём двумерный массив (слой)
        var piece = arrayOf<Array<Int>>()

        // Средний цикл создает строки внутри каждого слоя
        for (j in 0..2) {
            // Создаём одномерный массив (строку) внутри слоя
            var array = arrayOf<Int>()

            // Внутренний цикл заполняет строку нулями
            for (k in 0..2) {
                array += 0
            }

            // Добавляем заполненную строку в двумерный массив (слой)
            piece += array
        }

        // Добавляем слой в трёхмерный массив
        rubikCube += piece
    }

    // КАК ЭТО РАБОТАЕТ:
    // Создание пустого трёхмерного массива:
    // var rubikCube = arrayOf<Array<Array<Int>>>(): Создается пустой трёхмерный массив, который будет содержать слои (двумерные массивы).
    // Создание слоев (плоскостей):
    // Внешний цикл for (i in 0..2) создаёт 3 двумерных массива, каждый из которых представляет собой слой куба.
    // Создание строк внутри слоев:
    // Средний цикл for (j in 0..2) создаёт 3 строки внутри каждого слоя.
    // Заполнение строк элементами:
    // Внутренний цикл for (k in 0..2) добавляет 3 элемента со значением 0 в каждую строку.
    // Добавление строк и слоев:
    // После заполнения строки добавляем её в двумерный массив (слой), а затем сам слой добавляем в трёхмерный массив.

    /**-----Example 02-----*/
    // Обновление данных в массиве
    // Обновим один элемент массива, чтобы показать, как обращаться к элементам трёхмерного массива.
    // Обновление элемента: второй слой, третий ряд, первое место
    // rubikCube[1][2][0] = 1: Обращаемся ко второму слою (индекс 1), третьему ряду (индекс 2) и первому месту (индекс 0) и устанавливаем значение 1.
    rubikCube[1][2][0] = 1

    // Выводим данные трёхмерного массива
    println(Arrays.deepToString(rubikCube))
    // InConsole: [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [1, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]

    // ИТОГ: Это трёхмерный массив, представленный в виде строк. Первый уровень вложенности обозначает слои, второй — строки внутри слоя, и третий — элементы внутри строки.

    /**-----Example 03-----*/
    // Использование Array и функции инициализации
    // Также можно использовать функцию инициализации для более компактного создания трёхмерного массива:
    val rubikCubeAltA = Array(3) { Array(3) { Array(3) { 0 } } }
    // ИТОГ: Этот метод более короткий и удобный, особенно если нужно создать массив с одинаковыми начальными значениями.

}
